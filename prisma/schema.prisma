generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id        String   @id @default(cuid())
  email     String   @unique
  name      String? // Tornado opcional para manter compatibilidade
  password  String
  phone     String?
  role      String   @default("user")
  isActive  Boolean  @default(true)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  orders    Order[]
  reviews   Review[]
  wishlist  WishlistItem[]
  addresses Address[]
  sessions  Session[]
}

model Session {
  id        String   @id @default(cuid())
  userId    String
  token     String   @unique
  expiresAt DateTime
  createdAt DateTime @default(now())

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("sessions")
}

model Order {
  id                String        @id @default(cuid())
  userId            String?
  customerEmail     String
  customerName      String
  customerPhone     String?
  status            OrderStatus   @default(PENDING)
  paymentStatus     PaymentStatus @default(PENDING)
  paymentMethod     String?
  paymentId         String?
  externalReference String?       @unique

  subtotal     Float
  shippingCost Float @default(0)
  discount     Float @default(0)
  total        Float

  shippingAddress Json
  billingAddress  Json?

  items OrderItem[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  user User? @relation(fields: [userId], references: [id])

  @@map("orders")
}

model OrderItem {
  id        String  @id @default(cuid())
  orderId   String
  productId String
  name      String
  price     Float
  quantity  Int
  image     String?

  order Order @relation(fields: [orderId], references: [id], onDelete: Cascade)

  @@map("order_items")
}

model Review {
  id        String   @id @default(cuid())
  productId String
  userId    String
  rating    Int // 1-5 estrelas
  comment   String?
  images    String[]
  isActive  Boolean  @default(true)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([productId, userId])
  @@map("reviews")
}

model WishlistItem {
  id        String   @id @default(cuid())
  userId    String
  productId String
  createdAt DateTime @default(now())

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([userId, productId])
  @@map("wishlist_items")
}

model Product {
  id          String   @id @default(cuid())
  name        String
  slug        String   @unique
  description String?
  price       Float
  image       String?
  isActive    Boolean  @default(true)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  // Remova esta linha:
  // wishlistItems WishlistItem[]
}

model Address {
  id           String  @id @default(cuid())
  userId       String
  name         String
  street       String
  number       String
  complement   String?
  neighborhood String
  city         String
  state        String
  zipCode      String
  isDefault    Boolean @default(false)

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("addresses")
}

model Newsletter {
  id        String   @id @default(cuid())
  email     String   @unique
  name      String?
  isActive  Boolean  @default(true)
  createdAt DateTime @default(now())

  @@map("newsletter")
}

model Coupon {
  id          String     @id @default(cuid())
  code        String     @unique
  type        CouponType @default(PERCENTAGE)
  value       Float
  minValue    Float?
  maxUses     Int?
  usedCount   Int        @default(0)
  isActive    Boolean    @default(true)
  validFrom   DateTime?
  validUntil  DateTime?
  createdAt   DateTime   @default(now())
  updatedAt   DateTime   @updatedAt
  maxDiscount Float?

  @@map("coupons")
}

model Contact {
  id        String        @id @default(cuid())
  name      String
  email     String
  phone     String?
  subject   String
  message   String
  status    ContactStatus @default(PENDING)
  createdAt DateTime      @default(now())
  updatedAt DateTime      @updatedAt

  @@map("contacts")
}

model CartItem {
  id        String   @id @default(cuid())
  sessionId String
  productId String
  quantity  Int
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@unique([sessionId, productId])
  @@map("cart_items")
}

model ShippingRate {
  id          String  @id @default(cuid())
  zipCodeFrom String
  zipCodeTo   String
  weight      Float
  price       Float
  days        Int
  carrier     String
  service     String
  isActive    Boolean @default(true)

  @@map("shipping_rates")
}

enum OrderStatus {
  PENDING
  CONFIRMED
  PROCESSING
  SHIPPED
  DELIVERED
  CANCELLED
}

enum PaymentStatus {
  PENDING
  APPROVED
  REJECTED
  CANCELLED
  REFUNDED
}

enum CouponType {
  PERCENTAGE
  FIXED
}

enum ContactStatus {
  PENDING
  RESPONDED
  CLOSED
}
